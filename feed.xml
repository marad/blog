<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marad Blog</title>
    <link>http://blog.radoszewski.pl/feed/index.xml</link>
    <description>Recent content on Marad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jul 2017 10:50:54 +0200</lastBuildDate>
    <atom:link href="http://blog.radoszewski.pl/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jekyll To Hugo Migration Notes</title>
      <link>http://blog.radoszewski.pl/post/jekyll-to-hugo-migration/</link>
      <pubDate>Sat, 15 Jul 2017 10:50:54 +0200</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/jekyll-to-hugo-migration/</guid>
      <description>

&lt;p&gt;This blog is statically generated page hosted on my GitHub. Till recently the job of generating static files was handled by Jekyll. I didn&amp;rsquo;t do a lot of research before I first used it. I don&amp;rsquo;t think it would really help in my case. I used Jekyll because GitHub has support for it and it was convenient. I could store only the sources and GitHub will automatically compile the page when I push some changes. Jekyll was doing fine job. So the question arises&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;why-change-what-works&#34;&gt;Why change what works?&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s just painful to work with. I had a lot of problems with Ruby dependencies in wrong versions and it drove me crazy. Please don&amp;rsquo;t get me wrong, I don&amp;rsquo;t want to say that Ruby sucks or that Jekyll does. I really don&amp;rsquo;t care. The baseline here is that I had problems with this and I don&amp;rsquo;t want do deal with them anymore.&lt;/p&gt;

&lt;p&gt;The death of my system SSD was really the trigger. New installation of Linux and all the tools was required. A flash of memories from previously installing Jekyll, and I decided to migrate to something else.&lt;/p&gt;

&lt;h2 id=&#34;what-should-the-new-generator-provide&#34;&gt;What should the new generator provide?&lt;/h2&gt;

&lt;p&gt;The problem I faced was that my page was already online for a while. I strongly believe that you should never break page URLs. Once the URL is available on the internet it should point to it&amp;rsquo;s content forever. I also didn&amp;rsquo;t want to rewrite all my content to new format so it should handle markdown formatted content with YAML metadata. So the absolute &amp;ldquo;must have&amp;rdquo; was to be able to publish my old content with old URLs and without many changes.&lt;/p&gt;

&lt;p&gt;After some googling for static site generators I&amp;rsquo;ve decided to try &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;so-what-are-the-steps-to-migrate&#34;&gt;So what are the steps to migrate?&lt;/h2&gt;

&lt;h3 id=&#34;the-theme&#34;&gt;The theme&lt;/h3&gt;

&lt;p&gt;Jekyll has great support for &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; which is a language that compiles to CSS. Hugo doesn&amp;rsquo;t support this at all, and there is little chance it ever will. It turns out that Sass compiler is written in Ruby. I didn&amp;rsquo;t see that coming&amp;hellip; I&amp;rsquo;ve decided that for now I&amp;rsquo;ll just use the compiled CSS version, and deal with Sass later. A little research on this showed that there is &lt;a href=&#34;http://sass-lang.org/libsass&#34;&gt;libsaas&lt;/a&gt; that can be used in any language. Other than that, there were no surprises and porting current theme went smoothly.&lt;/p&gt;

&lt;h3 id=&#34;the-content&#34;&gt;The content&lt;/h3&gt;

&lt;p&gt;All pages and posts required addition of &lt;a href=&#34;https://gohugo.io/extras/aliases/&#34;&gt;aliases&lt;/a&gt; to get old URLs to work. In posts containing code (so almost all of them) I needed to change the way syntax highlighter worked. Hugo uses the same syntax highlighter as Jekyll, which is &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;. Unfortunately in Jekyll marking section of code uses special syntax. In Hugo I was able to configure it to use popular three backtick formatting. Just like on &lt;a href=&#34;https://help.github.com/articles/creating-and-highlighting-code-blocks/&#34;&gt;GitHub&lt;/a&gt;. Of course then I had to modify all the posts with the new markups.&lt;/p&gt;

&lt;h3 id=&#34;disqus-comments-and-google-analytics&#34;&gt;Disqus comments and Google Analytics&lt;/h3&gt;

&lt;p&gt;Last step was to think about how Disqus comments and GA will behave with my changes. Disqus is linking comments to given URL so changing target URLs (which are different for Hugo) will cause the old comments do disappear under posts. Luckily it provides the tool for comment migration. It&amp;rsquo;s just simple CSV with two columns - old page URL, and new page URL. Works like a charm!&lt;/p&gt;

&lt;p&gt;I thought about Google Analytics for a while and I don&amp;rsquo;t see anything that I should do. I don&amp;rsquo;t do much analyzing. After a short while it&amp;rsquo;ll simply show statistics for new URLs. Do you know if I should do anything with this?&lt;/p&gt;

&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;Hugo has great &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;instructions on deploying with GitHub Page&lt;/a&gt;. Last piece was to create a small publication script that will compile the page to the &lt;em&gt;gh-pages&lt;/em&gt; branch and push it to the origin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;
hugo
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add --all &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;Publishing to gh-pages&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;enjoy&#34;&gt;Enjoy!&lt;/h2&gt;

&lt;p&gt;That is all I needed to do in order to write this post ðŸ˜„. I hope we&amp;rsquo;ll get along with Hugo pretty well. Thank you for reading and see you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Cake Pattern</title>
      <link>http://blog.radoszewski.pl/post/cake-pattern/</link>
      <pubDate>Tue, 10 Nov 2015 12:17:17 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/cake-pattern/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s think a bit about how you should structure your program. If your codebase has less than 500 lines of code it is not really that hard to manage. You can simply manually create the objects and their dependencies to construct your application. The problem emerges when your codebase grows.  Managing hundreds of dependencies manually is a tedious task. We need some kind of mechanism to do that for us. If you know Java you pr/programming/scala/2015/11/10/cake-pattern.htmlobably have heard about Dependency Injection (DI) and Inversion of Control (IoC). This is one way to approach the problem. There is another one and it&amp;rsquo;s called &lt;em&gt;Cake Pattern&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h1&gt;

&lt;p&gt;I believe we should start with a paragraph or two highlighting some aspects of dependency injection. Before I learned about &lt;em&gt;Cake Pattern&lt;/em&gt; I thought that it was some kind of dependency injection. I was so wrong. In fact - this actually caused me some trouble understanding the &lt;em&gt;Cake Pattern&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Dependency Injection uses inversion of control to do it&amp;rsquo;s trick. This means that you only say what are your components and each component knows what other components it depends on. Later some container instantiates your components and their dependencies for you. You never have to write a single &lt;code&gt;new&lt;/code&gt;. This makes developing much easier. You can focus on what is it you want to do instead of how to wire everything up.&lt;/p&gt;

&lt;h1 id=&#34;the-cake-pattern&#34;&gt;The Cake Pattern&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Cake Pattern&lt;/em&gt; solves the same problem. It allows you to specify dependencies of your components, but it does this a little different. It never takes the control of the component creation. How is that possible? Well - by proper structuring your code. That&amp;rsquo;s the trick. Did you think that the &lt;em&gt;pattern&lt;/em&gt; part was a hoax?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at an example. Assume that we want to create the &lt;code&gt;Bakery&lt;/code&gt; which bakes bread (duh!). There is also the &lt;code&gt;Mill&lt;/code&gt; which can supply some flour. Obviously the &lt;code&gt;Bakery&lt;/code&gt; is going to need the flour from the &lt;code&gt;Mill&lt;/code&gt; - thus creating dependency. Also let&amp;rsquo;s not dive to deep in this and assume that &lt;code&gt;Mill&lt;/code&gt; just produces flour out of thin air.&lt;/p&gt;

&lt;p&gt;With dependency injection you would normally create the two components, and somehow tell the injector that &lt;code&gt;Bakery&lt;/code&gt; would like to have &lt;code&gt;Mill&lt;/code&gt; instance injected. The cake pattern is different because it uses interfaces to denote that the dependency will be available some time later. To do that we use a few scala &lt;code&gt;trait&lt;/code&gt;s that enable us to mix the implementation of that interfaces when creating the actual working instance of an object.&lt;/p&gt;

&lt;p&gt;We can start by defining the component and interface for the &lt;code&gt;Mill&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Flour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MillComponent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mill&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Mill&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Mill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;produceFlour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Flour&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;ve created the &lt;code&gt;Flour&lt;/code&gt; class to represent the goods produced by the &lt;code&gt;Mill&lt;/code&gt;. Then you can see that we&amp;rsquo;ve declared &lt;code&gt;MillComponent&lt;/code&gt; which promises to us that it&amp;rsquo;s implementations will return the &lt;code&gt;Mill&lt;/code&gt; instance through &lt;code&gt;mill&lt;/code&gt; method. Also there is &lt;code&gt;Mill&lt;/code&gt; trait which is just interface telling us that it can &lt;code&gt;produceFlour&lt;/code&gt;. This construct is like the definition of our component.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s create the actual implementation for the component and the &lt;code&gt;Mill&lt;/code&gt; itself:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularMillComponent&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MillComponent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mill&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Mill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularMill&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularMill&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Mill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;produceFlour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Flour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is quite simple. We create the component by extending its &lt;em&gt;definition&lt;/em&gt; we wrote above - note that this component is still a &lt;code&gt;trait&lt;/code&gt;. The &lt;code&gt;RegularMill&lt;/code&gt; implementation is, on the other hand, a class that simply implements the &lt;code&gt;Mill&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re done with this component. Note that its &lt;code&gt;mill&lt;/code&gt; field is &lt;code&gt;val&lt;/code&gt;. This means that we want only one instance of it. We could have left the &lt;code&gt;def&lt;/code&gt; there and then components would create new mill instance everytime they used the &lt;code&gt;mill&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;On to the bakery. To create the component we use the same template as before:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flour&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Flour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BakeryComponent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bakery&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bakery&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bakery&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bakeBread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bread&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The interesting bit is that this does not tell us anything about the dependency. At this level we don&amp;rsquo;t need any &lt;code&gt;Flour&lt;/code&gt; - we&amp;rsquo;re just declaring that the component provides &lt;code&gt;Bakery&lt;/code&gt; that can &lt;code&gt;bakeBread&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s see how we can declare the dependency and use it to implement &lt;code&gt;RegularBakery&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularBakeryComponent&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;BakeryComponent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;MillComponent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bakery&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bakery&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularBakery&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularBakery&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bakery&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bakeBread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;produceFlour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By specifying &lt;code&gt;this: MillComponent =&amp;gt;&lt;/code&gt; at the beginning of the trait we are telling the compiler that this trait can be mixed in only with objects that also have &lt;code&gt;MillComponent&lt;/code&gt; trait mixed in. This allows us to use the &lt;code&gt;mill&lt;/code&gt; while implementing the &lt;code&gt;bakeBread()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Soooo&amp;hellip; one thing left. How to use this? It&amp;rsquo;s quite simple, just mix everything in one object:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Object&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularMillComponent&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;RegularBakeryComponent&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bread&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bakery&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bakeBread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if you try to create an instance of &lt;code&gt;RegularBakeryComponent&lt;/code&gt; without some implementation of &lt;code&gt;MillComponent&lt;/code&gt; then the program will not compile at all. This means that if your program compiles all the dependencies are satisfied.&lt;/p&gt;

&lt;h1 id=&#34;pros-cons&#34;&gt;Pros &amp;amp; Cons&lt;/h1&gt;

&lt;p&gt;As you can see in cake pattern there is no &lt;em&gt;injection&lt;/em&gt; of dependencies. You simply declare the dependencies and then mix all the components in one &lt;em&gt;Object&lt;/em&gt;. Manual dependency management is a lot less &lt;em&gt;magical&lt;/em&gt; than the standard dependency injection. Sure it might be a little overwhelming with all those &lt;code&gt;trait&lt;/code&gt;s and mixing, but this is just using standard language features. Once you get this you&amp;rsquo;ll never have any problems with this type of dependency management again. Another great thing is that dependencies are checked at compile time so there are no long stack traces telling you that some dependency is missing.&lt;/p&gt;

&lt;p&gt;On the sad part - you might have noticed that it&amp;rsquo;s a little verbose when compared to Spring&amp;rsquo;s &lt;code&gt;@Component&lt;/code&gt; and &lt;code&gt;@Autowire&lt;/code&gt;. Also it&amp;rsquo;s a bit less flexible than standard DI. Imagine that you want one of the components to use one implementation of some interface and another one want different implementation of the same interface. In Spring you would use &lt;code&gt;@Qualifier&lt;/code&gt; for this. Here it&amp;rsquo;s a bit more tricky and I could explore this a bit more in some future post.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Classical dependency injection with inversion of control gives us some nice features, as the container at runtime can decide which component it&amp;rsquo;s going to inject. With cake pattern everything is wired up at compile time so this mechanism is a bit more &lt;em&gt;low level&lt;/em&gt;. You can of course make your own logic for instantiating components - you never gave up control over that - but this means you have a bit more work to do :)&lt;/p&gt;

&lt;p&gt;I hope that you&amp;rsquo;ve learned something new by reading this post. I definatelly did while writing it :)&lt;/p&gt;

&lt;p&gt;You can view whole example code at my &lt;a href=&#34;https://github.com/marad/cake-pattern-example&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Collectors in Java 8</title>
      <link>http://blog.radoszewski.pl/post/custom-java-8-collectors/</link>
      <pubDate>Fri, 31 Jul 2015 08:20:10 +0200</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/custom-java-8-collectors/</guid>
      <description>

&lt;p&gt;Java 8 sure did bring a few interesting features. One of them are definitely the streams. Internet is
full of the instructions on how to create and use them. Today I&amp;rsquo;d like to talk about something a
little bit different - collectors.&lt;/p&gt;

&lt;h1 id=&#34;what-is-a-collector&#34;&gt;What is a collector?&lt;/h1&gt;

&lt;p&gt;Streams can be used to process collections. The way it works is that we first define all
transformations on the collection with non-terminal operations like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.
Calling these functions on the stream only defines the transformations but doesn&amp;rsquo;t run them unless
there is a terminal operation called at the end.&lt;/p&gt;

&lt;p&gt;There are few basic terminal operations like &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, or &lt;code&gt;reduce&lt;/code&gt; but there is also more
generic method: &lt;code&gt;collect&lt;/code&gt;. This method takes a &lt;em&gt;collector&lt;/em&gt; and returns whatever that
collector returns.&lt;/p&gt;

&lt;p&gt;The purpose of the collector is to compose the data from the stream into one another type.&lt;/p&gt;

&lt;h1 id=&#34;how-does-the-collector-look-like&#34;&gt;How does the collector look like?&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s see the collector interface:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Collector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Supplier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;          &lt;span class=&#34;nf&#34;&gt;supplier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BiConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;      &lt;span class=&#34;nf&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&#34;nf&#34;&gt;finisher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Characteristics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;characteristics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the collector is a generic type that has type parameters named &lt;em&gt;T&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt;, and &lt;em&gt;R&lt;/em&gt;.
First one (&lt;em&gt;T&lt;/em&gt;) is the type of a stream we want to collect. For example for &lt;code&gt;Stream&amp;lt;String&amp;gt;&lt;/code&gt;
the &lt;em&gt;T&lt;/em&gt; is &lt;code&gt;String&lt;/code&gt;. Second (&lt;em&gt;A&lt;/em&gt;) is the accumulator type. This is the type that is used to store
values while processing the stream. Finally the &lt;em&gt;R&lt;/em&gt; is returned type. This is what the collector
actually returns.&lt;/p&gt;

&lt;p&gt;This means that you can collect &lt;code&gt;Stream&amp;lt;T&amp;gt;&lt;/code&gt; to value of type &lt;code&gt;R&lt;/code&gt; using some helper variables of
type &lt;code&gt;A&lt;/code&gt; while collecting.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;supplier()&lt;/code&gt; method returns a function (!) that is used to create our accumulator. This is
important here. All this methods (except for the &lt;code&gt;characteristics()&lt;/code&gt;) return functions.&lt;/p&gt;

&lt;p&gt;Next up is method named &lt;code&gt;acumulator&lt;/code&gt;. This returns a function that takes our accumulator (of type
&lt;em&gt;A&lt;/em&gt;) and a value from a stream (of type &lt;em&gt;T&lt;/em&gt;) and combines them. For example if &lt;em&gt;A&lt;/em&gt; would be of type
&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; then we could just add the element to the list here. This is exactly what
&lt;code&gt;Collectors.toList&lt;/code&gt; does :)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;combiner()&lt;/code&gt; is a method that returns a binary combiner for our accumulator. This means that the
returned function should take two arguments of type &lt;em&gt;A&lt;/em&gt;, combine them, and return new value of
type &lt;em&gt;A&lt;/em&gt;. Continuing the example for lists this would simply merge two lists together into one.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;finisher()&lt;/code&gt; method returns a function that extracts the final result of type &lt;em&gt;R&lt;/em&gt; from
intermediate accumulator. Our example doesn&amp;rsquo;t help much here because for lists the accumulator type
and returned type could be the same and &lt;code&gt;finisher()&lt;/code&gt; could simply return the final accumulator
value. It&amp;rsquo;s not hard to imagine tough, that we could use some kind of a container while processing
the collection and finally extract the result from the container. This is the function for the job.&lt;/p&gt;

&lt;p&gt;Finally the &lt;code&gt;characteristics()&lt;/code&gt; method. This returns a set of characteristics that the collector
has. This is used to optimize collecting the stream. We can return there a set of values from
&lt;code&gt;Collector.Characteristics&lt;/code&gt; enum. The values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CONCURRENT - This tells that the collector can be used with multiple threads.&lt;/li&gt;
&lt;li&gt;IDENTITY_FINISH - This indicates that the intermediate type &lt;em&gt;A&lt;/em&gt; is the same as returned type &lt;em&gt;R&lt;/em&gt;
so there is no need to call &lt;code&gt;finisher()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;UNORDERED - Means that the order of elements is not important. This information can be used to
optimize processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;implement-all-the-collectors&#34;&gt;Implement, all the collectors!&lt;/h1&gt;

&lt;p&gt;Well, maybe let us choose one collector that we would like to have. Recently I&amp;rsquo;ve stumbled upon the
problem of finding the most popular element in a collection. By most popular I mean the element that
occurs the most. So in &lt;code&gt;a, a, a, b, b, c&lt;/code&gt; the most popular is obviously &lt;code&gt;a&lt;/code&gt; because it occurs three
times.&lt;/p&gt;

&lt;p&gt;In terms of a collector. We want to collect the stream of type &lt;em&gt;X&lt;/em&gt; to single value of type
&lt;em&gt;Optional&amp;lt;X&amp;gt;&lt;/em&gt;. This value should be the most popular item. We use optional here because if we supply
empty list then we do not have any most popular item there. As the accumulator type I suggest using
&lt;code&gt;Map&amp;lt;X, Integer&amp;gt;&lt;/code&gt; to store elements with their occurrence count. I&amp;rsquo;ll explain this in detail later.
So the collector generic parameters should be &lt;code&gt;Collector&amp;lt;X, Map&amp;lt;X,Integer&amp;gt;, Optional&amp;lt;X&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To implement the collector we can simply implement the interface:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MostPopular&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// all the methods listed for collector above&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can just implement the functions. Let&amp;rsquo;s start with simple accumulator supplier:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Supplier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;supplier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we simply return the reference to the &lt;code&gt;HashMap&lt;/code&gt; constructor as the supplier. Whenever the
supplier method is called new &lt;code&gt;HashMap&lt;/code&gt; will be created.&lt;/p&gt;

&lt;p&gt;Moving on, to the accumulator:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BiConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method should be used to add another element to our accumulator. In this implementation we
simply fetch the occurrence count for this element from the map. If the value is &lt;code&gt;null&lt;/code&gt; then this is
the first occurrence and we set the value to 1. If the value is other than &lt;code&gt;null&lt;/code&gt; then we simply add
1 to this value, and lastly we store the value back in the map.&lt;/p&gt;

&lt;p&gt;This method gets called for every element. This means that after all elements are processed by this
method we end up with the accumulator that have the mapping from the element to its occurrence
times.&lt;/p&gt;

&lt;p&gt;Next on the list is the combiner method:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well&amp;hellip; this is not what you expected at all. I can tell! Let me explain myself. The combiner method
is used when the process can be parallelized. This method is here to merge processing results from
different threads. Every thread gets part of the stream to collect, and in the end all the
resulting accumulators are merged by this method. In this particular collector the implementation
for this method can be a bit tricky, but is not crucial so I just let it go :) We will not use
distributed processing anyway.&lt;/p&gt;

&lt;p&gt;This method is not used unless you create &lt;code&gt;parallelStream()&lt;/code&gt; instead of &lt;code&gt;stream()&lt;/code&gt; from the
collection.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s almost finish with finisher method implementation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;finisher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we want to extract the final result from accumulator.
This implementation is pretty straight forward if you are used to the stream-way of processing data.
We have our accumulator &lt;code&gt;acc&lt;/code&gt; which is a map of elements with their occurrence count. We create a
stream from this map&amp;rsquo;s entry set and using reduce we find the value of type &lt;code&gt;Optional&amp;lt;Map.Entry&amp;lt;T,
Integer&amp;gt;&amp;gt;&lt;/code&gt; that represents the entry with the biggest occurrence value.&lt;/p&gt;

&lt;p&gt;As here we have got whole &lt;code&gt;Map.Entry&amp;lt;T, Integer&amp;gt;&lt;/code&gt; but need only the key from the entry we simply use
&lt;code&gt;map(Map.Entry::getKey)&lt;/code&gt; on the optional value. This gives us exactly what we want - &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;
with the most popular value.&lt;/p&gt;

&lt;p&gt;Last method that we have to implement is the &lt;code&gt;characteristics()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Characteristics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;characteristics&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;emptySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not very exciting but does the job. I guess we could use &lt;code&gt;UNORDERED&lt;/code&gt; here as well.&lt;/p&gt;

&lt;p&gt;Finally you can see whole implementation &lt;a href=&#34;https://github.com/marad/java8-custom-collector-example&#34;&gt;here&lt;/a&gt;. Having this collector we can simply use it to
find the most popular element in collection of any type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Lists&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MostPopular&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;());&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Lists&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MostPopular&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;summing-up&#34;&gt;Summing up&lt;/h1&gt;

&lt;p&gt;Collectors are in fact a Java way of defining custom &lt;a href=&#34;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&#34;&gt;folds&lt;/a&gt;. As it&amp;rsquo;s the Java way it has to
be a little verbose ;) Anyway - folds are great thus collectors are great too! Thanks for reading!&lt;/p&gt;

&lt;p&gt;You can view entire example code at my &lt;a href=&#34;https://github.com/marad/java8-custom-collector-example&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Mighty Monad</title>
      <link>http://blog.radoszewski.pl/post/mighty-monad/</link>
      <pubDate>Sun, 31 May 2015 11:52:40 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/mighty-monad/</guid>
      <description>

&lt;p&gt;When you begin to learn functional programming everybody is telling you that pure functions with no
side effects are the only way to go. This is fine up to the point. Sooner or later you will hear
about monads. This post tries to explain what the monad is and why you should use it.&lt;/p&gt;

&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;To fully understand the examples here you should know at least basics of Scala language. You should
also know &lt;a href=&#34;http://www.tutorialspoint.com/scala/scala_options.htm&#34;&gt;how to use &lt;code&gt;Option[T]&lt;/code&gt;&lt;/a&gt; type in Scala or at least know the Java&amp;rsquo;s &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;
which I described &lt;a href=&#34;http://blog.radoszewski.pl/programming/java/2015/04/19/java-optional.html&#34;&gt;here&lt;/a&gt;. In the section about pure functional languages I used a bit of
Haskell, but I tried to make the examples as clear as I could for those who don&amp;rsquo;t know it.&lt;/p&gt;

&lt;h1 id=&#34;the-definition&#34;&gt;The definition&lt;/h1&gt;

&lt;p class=&#34;notice&#34;&gt;This is raw definition of monad. Please note that you don&#39;t have to fully
understand it to read the following sections. You can safely skip to the &lt;em&gt;Simpler definition&lt;/em&gt;
section. Having said that, I encourage you to face this definition. It may help you later on.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with something not simple at all! The monad definition:&lt;/p&gt;

&lt;p&gt;We can say that &lt;em&gt;M&lt;/em&gt; is a monad when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is generic type &lt;code&gt;M[T]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;there is a &lt;em&gt;unit&lt;/em&gt; function &lt;code&gt;T =&amp;gt; M[T]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;there is a &lt;em&gt;flatMap&lt;/em&gt; function &lt;code&gt;(M[T], T =&amp;gt; M[T]) =&amp;gt; M[T]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make things even worse, there are three monad laws:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Left identity: &lt;code&gt;unit(x) flatMap f == f(x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Right identity: &lt;code&gt;m flatMap unit == m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Associativity: &lt;code&gt;(m flatMap f) flatMap g == m flatMap (f flatMap g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me clarify this definition a bit. Leaving the laws for later let us jump back to the &lt;em&gt;M&lt;/em&gt; type
and the &lt;em&gt;unit&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt; functions.  Type &lt;em&gt;M&lt;/em&gt; is just regular generic type like &lt;code&gt;Option[T]&lt;/code&gt; or
&lt;code&gt;Try[T]&lt;/code&gt;.  The &lt;em&gt;unit&lt;/em&gt; function takes the value of type &lt;em&gt;T&lt;/em&gt; and wraps it with a monadic type. For
&lt;code&gt;Option[T]&lt;/code&gt; the &lt;em&gt;unit&lt;/em&gt; operation is simple &lt;code&gt;Some(t: T)&lt;/code&gt;.  Lastly - the &lt;em&gt;flatMap&lt;/em&gt;. Literature refers
to it as the &lt;em&gt;bind&lt;/em&gt; operation. I decided to call it &lt;em&gt;flatMap&lt;/em&gt; here so it sounds more familiar. It,
of course, takes a monadic value &lt;code&gt;M[T]&lt;/code&gt; and a function &lt;code&gt;T =&amp;gt; M[T]&lt;/code&gt; and returns another &lt;code&gt;M[T]&lt;/code&gt;. This
basically means that we can do some computation on value that is inside the monad and create a new
monad with the result of that computation. Scala is object oriented so &lt;code&gt;flatMap&lt;/code&gt; is just a method
and takes one parameter (the function) the other being just &lt;em&gt;this object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To sum this up with an example based on type &lt;code&gt;Option[T]&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we have got generic type &lt;code&gt;Option[T]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we have &lt;em&gt;unit&lt;/em&gt; function &lt;code&gt;Some(t: T)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we have &lt;em&gt;bind/flatMap&lt;/em&gt; method &lt;code&gt;Option.flatMap(f: T =&amp;gt; Option[T]): Option[T]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Going back to the monad laws. The first two laws are fairly simple and describe the relations
between &lt;em&gt;unit&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt;. The &lt;em&gt;associativity&lt;/em&gt; law tells us just that the order of the &lt;em&gt;flatMap&lt;/em&gt;
doesn&amp;rsquo;t matter. We can write the laws for &lt;code&gt;Option[T]&lt;/code&gt; as following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Some(t) flatMap f == f(t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opt flatMap Some[T] == opt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(opt flatMap f) flatMap g == opt flatMap (t =&amp;gt; f(t) flatMap g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To prove that the laws hold we should replace our methods with their implementations to see if we
can end up with the other side of equation. This could be a topic for whole new post (and maybe will
be) so I&amp;rsquo;ll skip this for now.&lt;/p&gt;

&lt;h1 id=&#34;simpler-definition&#34;&gt;Simpler definition&lt;/h1&gt;

&lt;p&gt;The reality is that these monad laws are mainly important when you want to implement a monad
yourself or you need to rely on one of these properties in your code. In fact when talking about
monads most developers are thinking just about generic type &lt;em&gt;M[T]&lt;/em&gt; with &lt;em&gt;unit&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt;
operations.&lt;/p&gt;

&lt;p&gt;There is even more! There are types that we call a monads but they do not satisfy those laws! Let&amp;rsquo;s
take &lt;code&gt;Try[T]&lt;/code&gt; for example. This monad is used to deal with possible exceptions that might occur
while processing. If you have some operation &lt;code&gt;expr: T&lt;/code&gt; that can throw some exception you
may want to wrap it with &lt;code&gt;Try(expr)&lt;/code&gt;. This will return &lt;code&gt;Success(t: T)&lt;/code&gt; containing the result of the
function or &lt;code&gt;Failure(ex: Throwable)&lt;/code&gt; with the exception that was thrown by that function. If you
closely examine all monad laws you can see that the &lt;em&gt;left identity&lt;/em&gt; law does not hold.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This tells us that following should be true:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Try&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The law works fine if everything goes smooth and no exception is thrown. The problem pops up when
either &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;expr&lt;/code&gt; throws an exception. The left hand side &lt;code&gt;Try(expr) flatMap f&lt;/code&gt; never throws an
exception and just returns &lt;code&gt;Failure(ex)&lt;/code&gt;. The right hand side &lt;code&gt;f(expr)&lt;/code&gt; will just throw the
exception so the law does not hold thus &lt;code&gt;Try[T]&lt;/code&gt; is not precisely a monad, but that is not a problem
for us. We are not mathematicians (no offense ment!). We just want things to work :)&lt;/p&gt;

&lt;h1 id=&#34;so-what-does-all-this-means-for-developers&#34;&gt;So what does all this means for developers?&lt;/h1&gt;

&lt;p&gt;Monadic structure gives us, developers, a uniform way of defining a chain of transformations on
virtually any type. Just look at this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// List[Char]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;groupBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                      &lt;span class=&#34;c1&#34;&gt;// Map[Char, List[Char]]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mapValues&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                      &lt;span class=&#34;c1&#34;&gt;// Map[Char, Int]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reduceLeftOption&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// Option[(Char, Int)]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                              &lt;span class=&#34;c1&#34;&gt;// Option[Char]&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code finds the most popular element in the list. In this example the most popular element
is &lt;code&gt;c&lt;/code&gt; because it appears 4 times. I&amp;rsquo;ve defined a chain of transformations to find this value. The
most interesting thing about that is that the type I&amp;rsquo;m operating on changed three times, but the
chain still looks uniform! We start with a &lt;code&gt;List[Char]&lt;/code&gt; after calling &lt;code&gt;groupBy&lt;/code&gt; method we have a
&lt;code&gt;Map[Char, List[Char]]&lt;/code&gt;. Then we replace the lists with just their sizes so after &lt;code&gt;mapValues&lt;/code&gt; the
type is &lt;code&gt;Map[Char, Int]&lt;/code&gt;. With &lt;code&gt;reduceToOption&lt;/code&gt; we find the element of the map that has the biggest
value and create &lt;code&gt;Option[(Char, Int)]&lt;/code&gt;. Then we just get the first element from the tuple (this is
our most popular char) with &lt;code&gt;map&lt;/code&gt; and the final type is &lt;code&gt;Option[Char]&lt;/code&gt;. Last operation is just
printing the value (if found) to the standard output.&lt;/p&gt;

&lt;p&gt;We used three different monads: List, Map, and Option. Every line of code changed the output type.
Yet we still could invoke new transformations like we didn&amp;rsquo;t care! I personally think that this is
fantastic :)&lt;/p&gt;

&lt;p&gt;You may have noticed that I didn&amp;rsquo;t use the &lt;code&gt;flatMap&lt;/code&gt; method. In fact every method that I used above
CAN be implemented using one or more &lt;code&gt;flatMap&lt;/code&gt; calls. Let&amp;rsquo;s take simple &lt;code&gt;map&lt;/code&gt; for example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These methods are just some combinations of &lt;code&gt;flatMap&lt;/code&gt; that are useful and were given a name.  Of
course they are not implemented with &lt;code&gt;flatMap&lt;/code&gt; in Scala because it would hurt the performance, but
the point is that they are the result of those types (List, Map, Option) being a monads.&lt;/p&gt;

&lt;h1 id=&#34;word-about-functional-programming&#34;&gt;Word about functional programming&lt;/h1&gt;

&lt;p class=&#34;warning&#34;&gt;This part contains dangerous amounts of Haskell.&lt;/p&gt;

&lt;p&gt;Scala is kind-of functional programming language. You can write some parts functionally and other
imperatively. This is great because by mixing the styles we can end up with code that is both
readable and concise. Monads have another side which is extremely important for pure functional
languages like Haskell.&lt;/p&gt;

&lt;h2 id=&#34;the-order&#34;&gt;The order&lt;/h2&gt;

&lt;p&gt;You see, in pure functional languages you cannot define the order of operations. You can just define
some equivalences. What do I mean? Take a look:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are used to call this a function definition but what really happens here? We just tell that the
&lt;code&gt;add(x,y)&lt;/code&gt; string can be replaced with &lt;code&gt;x + y&lt;/code&gt; string on the code level. In fact we could evaluate
pure functional code just by replacing strings!&lt;/p&gt;

&lt;p&gt;Going back to the monads. In pure functional languages to define the order of computation you would
have to invoke a function on a call to function etc.:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see that here we have to evaluate &lt;code&gt;h(x)&lt;/code&gt; then pass the value to &lt;code&gt;g&lt;/code&gt; and finally to &lt;code&gt;f&lt;/code&gt;. Try
to imagine bigger program written like that. Well yes, it would be unreadable!&lt;/p&gt;

&lt;p&gt;Now we could scream: &lt;em&gt;Monads to the rescue!&lt;/em&gt;. But let&amp;rsquo;s not. If you look again at the code to find
the most popular element in list you can see that we strictly defined the order for the operations.&lt;/p&gt;

&lt;p&gt;This is exactly what we use in Haskell to pretend that we are doing imperative code. Of course
Haskell has some syntactic sugar on top of it so instead of writing &lt;code&gt;flatMap&lt;/code&gt; (which in Haskell is
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;) you can write it imperatively-ish. The &lt;code&gt;do&lt;/code&gt; notation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing1&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is going on here? The &lt;code&gt;thing1&lt;/code&gt; and &lt;code&gt;thing2&lt;/code&gt; are monadic values (we can call &lt;code&gt;flatMap&lt;/code&gt; on them).
The &lt;code&gt;func1&lt;/code&gt; and &lt;code&gt;func2&lt;/code&gt; returns a monadic values. What is going on here is that first we get the
value form &lt;code&gt;thing1&lt;/code&gt; and name it &lt;code&gt;x&lt;/code&gt;. Then we pass it as a value to the &lt;code&gt;func1&lt;/code&gt; which returns another
monad. Then we take value from the monad and name it &lt;code&gt;y&lt;/code&gt;&amp;hellip; You see where this is going. This
clearly defines the order of operations.&lt;/p&gt;

&lt;p&gt;Example above is exactly the same as:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;thing1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You see that the &lt;code&gt;do&lt;/code&gt; notation is a bit more readable :) This example is taken from &lt;a href=&#34;https://wiki.haskell.org/Monad&#34;&gt;Haskell
Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-state-and-side-effects&#34;&gt;The state and side effects&lt;/h2&gt;

&lt;p&gt;Another thing is that in Scala we can talk about mutable and immutable state. In pure functional
programming there is no state at all! There are only arguments passed to functions. That&amp;rsquo;s the
closest thing to state you can get.&lt;/p&gt;

&lt;p&gt;But there is state in the world. Our hard drives have state. Keyboard has state. There is a lot of
state everywhere! How to deal with this in Haskell? You guessed it - monads. Lets look at this quick
example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;do&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getChar&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;putChar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program, as you might suspect, reads one character from the standard input and writes it to
standard output. To put it simply: awaits for keyboard button to be pressed and prints the letter to
the console.&lt;/p&gt;

&lt;p&gt;Here you can see that &lt;code&gt;getChar&lt;/code&gt; does have some kind of state as the value seems to materialize from
nothing - it doesn&amp;rsquo;t expect any arguments. So what happens here? Well - the input/output operations
are wrapped with a monad which acts here as a gate between our stateful world and the world of pure
functions.&lt;/p&gt;

&lt;p&gt;We can rewrite it using &lt;code&gt;flatMap&lt;/code&gt; (which in Haskell is &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getChar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;putChar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Scala it would look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Unit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getChar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;putChar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;getChar&lt;/code&gt; function returns a monad. If we invoke &lt;code&gt;flatMap&lt;/code&gt; on it gives us a key pressed on the keyboard as a
parameter to our function. Our function here is &lt;code&gt;putChar&lt;/code&gt;. It takes one char and returns a monad
back. The returned monad is empty (like &lt;code&gt;Unit&lt;/code&gt; in Scala) so the value is not interesting. The
&lt;code&gt;putChar&lt;/code&gt; function does something else behind the scenes. It writes the character to the standard
output. This is side effect that we wanted. The ability to talk to stateful world.&lt;/p&gt;

&lt;p&gt;All this is thanks to humble &lt;code&gt;flatMap&lt;/code&gt; :)&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Thanks for reading! I hope that you will not be frightened by the &lt;em&gt;monad&lt;/em&gt; word anymore! These are
useful little creatures. They are easy to use when you get the hang of them, but quite hard to learn
(and explain!). I really hope that this post was helpful to you because when I wanted to learn
monads the first time I couldn&amp;rsquo;t understand a single thing about them. Then something just &lt;em&gt;clicked&lt;/em&gt;
and everything was clear. I hope that it just &lt;em&gt;clicked&lt;/em&gt; for you today :)&lt;/p&gt;

&lt;p&gt;If you have any questions please leave a comment below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No one expects the Spanish functions</title>
      <link>http://blog.radoszewski.pl/post/spanish-functions/</link>
      <pubDate>Sun, 26 Apr 2015 15:07:45 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/spanish-functions/</guid>
      <description>

&lt;p&gt;Scala, as a functional language, treats functions as first class citizens. Of course it&amp;rsquo;s also
object oriented language. Those two paradigms can be seen as conflicting with each other. In this
post I&amp;rsquo;d like to show you some different ways of creating a functions in Scala to show that these
two worlds can coexist.&lt;/p&gt;

&lt;h1 id=&#34;foreword&#34;&gt;Foreword&lt;/h1&gt;

&lt;h2 id=&#34;function&#34;&gt;Function&lt;/h2&gt;

&lt;p&gt;Let us start by defining what a function is. Wikipedia supplies us with this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function f from X to Y is a subset of the Cartesian product X Ã— Y subject to the following
condition: every element of X is the first component of one and only one ordered pair in the
subset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is of course mathematical definition of a function. It says that given two sets &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; we
define &lt;code&gt;f&lt;/code&gt; as some kind of mapping from &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt;. Also we have to define such mapping for all
elements from &lt;code&gt;X&lt;/code&gt;, and each element from &lt;code&gt;X&lt;/code&gt; have only one mapping to any element from &lt;code&gt;Y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get back to the programming world. We have functions here, but our functions are not quite
like the definition says. We can make the function be non-deterministic which means that it can
basically return different values when called with the same inputs twice. Those functions have some
kind of side effect. Reading data from network with &lt;code&gt;receive&lt;/code&gt; function is a good example. We always
call it with the same arguments, yet it always returns different data.&lt;/p&gt;

&lt;p&gt;But as it turns out - if we create a function that operates &lt;strong&gt;only&lt;/strong&gt; on its arguments it&amp;rsquo;s
impossible to make it return different values for the same arguments.&lt;/p&gt;

&lt;p&gt;Functions that operate only on their arguments are called &lt;em&gt;pure functions&lt;/em&gt;. We all should always use
pure functions, because they are easy to reason about.  Unfortunately sometimes we have to interact
with outside world and this is mostly done through side effects.&lt;/p&gt;

&lt;h2 id=&#34;partial-function&#34;&gt;Partial function&lt;/h2&gt;

&lt;p&gt;Partial function is a function that is defined only for some elements of &lt;code&gt;X&lt;/code&gt;. This means that
there are some elements of &lt;code&gt;X&lt;/code&gt; that cannot be supplied as an argument to our function - it would
give us an error.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partial&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example function will work only for one argument: &lt;code&gt;1&lt;/code&gt;. Any other value would cause an error.&lt;/p&gt;

&lt;h2 id=&#34;higher-order-function&#34;&gt;Higher order function&lt;/h2&gt;

&lt;p&gt;One last thing we should know before going further is: what is higher order function? Well it&amp;rsquo;s just
a function that operates on other functions. It can receive a function as an argument or it can
create a function and return it as a value.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This simple higher order function just takes two parameters - a function and a number. Then it
applies the &lt;code&gt;f&lt;/code&gt; function to the number.&lt;/p&gt;

&lt;h1 id=&#34;define-a-function-in-scala&#34;&gt;Define a function in Scala&lt;/h1&gt;

&lt;p&gt;To define a function or method in Scala we normally write:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;s&amp;quot;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can use this function as a parameter to other function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Ben&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;map&lt;/code&gt; is a higher order function which translates each &lt;code&gt;Seq&lt;/code&gt; element to new element using the
function that was supplied as its argument. Result will be: &lt;code&gt;Seq(&amp;quot;Hello Bob&amp;quot;, &amp;quot;Hello Ben&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Scala there is a special method that we can implement in our class or object that gives it
function-like invocation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Greeter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;s&amp;quot;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;Greeter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Ben&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// will return &amp;quot;Hello Ben&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the &lt;code&gt;apply&lt;/code&gt; method gives us some syntactic sugar in Scala - nice! But if we can use it as a
function, can we pass it to the higher order function like &lt;code&gt;map&lt;/code&gt;?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Ben&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Greeter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will unfortunately throw an error at compile time saying that it wanted a function &lt;code&gt;String =&amp;gt;
String&lt;/code&gt; and got &lt;code&gt;Greeter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The good news is that we can fix this! We must tell the compiler that our object is also a function
by extending it&amp;rsquo;s type signature:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Greeter&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;s&amp;quot;Hello &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can pass our &lt;code&gt;Greeter&lt;/code&gt; object to &lt;code&gt;map&lt;/code&gt; and everything works fine!&lt;/p&gt;

&lt;p&gt;As you can see Scala merges the world of object oriented programming and the world of functional
programming by allowing objects and classes to act like functions.&lt;/p&gt;

&lt;h1 id=&#34;sequences-and-maps&#34;&gt;Sequences and Maps&lt;/h1&gt;

&lt;p&gt;As I mentioned above - functions are mappings. This means that we could define a new function just
by defining a mapping between two sets of data. This is why Scala&amp;rsquo;s &lt;code&gt;Map[A, B]&lt;/code&gt; extends the &lt;code&gt;A =&amp;gt; B&lt;/code&gt;
type signature. It basically allows us to use any &lt;code&gt;Map&lt;/code&gt; as a function from type &lt;code&gt;A&lt;/code&gt; to type &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will give the &lt;code&gt;result&lt;/code&gt; a value of &lt;code&gt;Seq(&amp;quot;three&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;one&amp;quot;)&lt;/code&gt; so map acts exactly as partial
function. It&amp;rsquo;s partial because it&amp;rsquo;s defined only for values 1, 2, and 3.&lt;/p&gt;

&lt;p&gt;And what about other collections? Well, a sequence maps index to a value, doesn&amp;rsquo;t it?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letters&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mkString&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; value will be &lt;em&gt;&amp;ldquo;hello&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;function-composition&#34;&gt;Function composition&lt;/h1&gt;

&lt;p&gt;Mapping over some sequence is fine to show that lists and maps are functions but you may say that it
doesn&amp;rsquo;t really give us much because after all we can write it like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The true fun begins when you want to operate on some functions. For example we would like to compose
two functions. This means that we apply the first function to the argument and then apply the second
to the value returned by the first: &lt;code&gt;f(g(x))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This can be also done with maps and sequences:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;englishToInteger&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;zero&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;integerToGerman&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;eins&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;zwei&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;drei&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;englishToGerman&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;englishToInteger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;integerToGerman&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zwei&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;englishToGerman&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course value of &lt;code&gt;zwei&lt;/code&gt; will be a string &lt;em&gt;&amp;ldquo;zwei&amp;rdquo;&lt;/em&gt;. The &lt;code&gt;andThen&lt;/code&gt; is a method of
&lt;a href=&#34;http://www.scala-lang.org/api/current/index.html#scala.Function1&#34;&gt;Function1&lt;/a&gt; class and it composes two functions. Here we create the function
&lt;code&gt;englishToGerman&lt;/code&gt; by composing &lt;code&gt;englishToInteger&lt;/code&gt; with &lt;code&gt;integerToGerman&lt;/code&gt;. The argument flow is quite
straightforward here - &lt;em&gt;&amp;ldquo;one&amp;rdquo;&lt;/em&gt; is passed to the &lt;code&gt;englishToInteger&lt;/code&gt; function (which is a Map!). This
gives us an integer representing the number: &lt;code&gt;1&lt;/code&gt;. Then this integer is passed to &lt;code&gt;integerToGerman&lt;/code&gt;
sequence which maps indexes to German numbers.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Even though I&amp;rsquo;ve been using Scala for some time now I&amp;rsquo;ve discovered that maps and lists act as
functions very recently. What is great here is that knowing that gives me a new perspective on those
data structures. I hope that for you this is as much fun as it is for me.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you are still wondering what&amp;rsquo;s with the title &lt;a href=&#34;https://www.youtube.com/watch?v=7WJXHY2OXGE&#34;&gt;watch this&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optional in Java 8</title>
      <link>http://blog.radoszewski.pl/post/java-optional/</link>
      <pubDate>Sun, 19 Apr 2015 19:06:46 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/java-optional/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been a part of self-educating team. My workmates and I decided to learn Java 8
features so we could use it at work. Each of us have one or two topics to cover and we had to teach
each other about the cool new features like streams or better type inference. My part was to
cover the &lt;code&gt;Optional&lt;/code&gt; class, and today I&amp;rsquo;d like to show and explain how and why you should use it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Optional&lt;/code&gt; class is a very underestimated addition in Java 8. &lt;a href=&#34;http://huguesjohnson.com/programming/java/java8optional.html&#34;&gt;Some people may have a feeling
that &lt;code&gt;Optional&lt;/code&gt; is pointless&lt;/a&gt;. In fact if you have function that may or may not
produce some result you should use &lt;code&gt;Optional&lt;/code&gt;. Even using it as shown in linked post gives you some
benefit. Method signature tells you that when called it may return a value or nothing. No need to
read the docs to find out where your &lt;code&gt;NullPointerException&lt;/code&gt; is coming from.&lt;/p&gt;

&lt;p&gt;Author of the post tries to understand why &lt;code&gt;Optional&lt;/code&gt; fixes the problem with &lt;code&gt;NullPointerException&lt;/code&gt;
while giving the examples that it causes more problems than it solves. This is mostly because he&amp;rsquo;s
using this class in a way he used to work with &lt;code&gt;null&lt;/code&gt;s - treating &lt;code&gt;Optional&lt;/code&gt; as a value. You should
treat &lt;code&gt;Optional&lt;/code&gt; more as a container for value and &lt;strong&gt;NEVER&lt;/strong&gt; make a method that returns &lt;code&gt;Optional&lt;/code&gt;
that is &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Doing this already fixes most NPEx&amp;rsquo;es but why stop here? By properly using optionals we can achieve
cleaner and more readable code.&lt;/p&gt;

&lt;p&gt;Assume we&amp;rsquo;ve got a library. Library has books, and each book should have an author. We know for a
fact though that some books in our library doesn&amp;rsquo;t have an author assigned. So we&amp;rsquo;ve got structure
along the lines of:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Author&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getAuthor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ofNullable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Library&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findBook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have our model defined let&amp;rsquo;s think about finding author by book&amp;rsquo;s title. Normally we
would have to find book by title, and then check if it&amp;rsquo;s not null and then get the author and get
check if that is not null. Finally we could do what we want with the author object. So without
optionals it would look like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findBook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Some Title&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Author&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAuthor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;doStuff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With optionals we can&amp;rsquo;t get the &lt;code&gt;null&lt;/code&gt; so that&amp;rsquo;s already a gain. Well - we could but one should
really have no idea about programming to achieve this in real life. But the code isn&amp;rsquo;t that great at
all. I&amp;rsquo;d say that it looks even worse:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findBook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Some Title&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAuthor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;doStuff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Still needs some improvement. There is a method in &lt;code&gt;Optional&lt;/code&gt; called &lt;code&gt;ifPresent()&lt;/code&gt; that takes a
function and invokes it on the inner object if the object is, well, present. Using this method we
could make it a bit better:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findBook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Some Title&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ifPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAuthor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ifPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doStuff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But as Hugues states - this is still not entirely readable. What he didn&amp;rsquo;t mention is the fact that
&lt;code&gt;Optional&lt;/code&gt; has also another method that give it it&amp;rsquo;s awesomeness. Meet the &lt;code&gt;flatMap&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;findBook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Some Title&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getAuthor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ifPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doStuff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does the &lt;code&gt;flatMap&lt;/code&gt; do? If the value of &lt;code&gt;Optional&lt;/code&gt; is present then it invokes the function
passed as parameter on that value. If value is not present - &lt;code&gt;flatMap&lt;/code&gt; returns empty &lt;code&gt;Optional&lt;/code&gt;. The
function must return an &lt;code&gt;Optional&lt;/code&gt; which is in later returned by the &lt;code&gt;flatMap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case we pass the &lt;code&gt;Book::getAuthor&lt;/code&gt; which is a short for &lt;code&gt;book -&amp;gt; book.getAuthor()&lt;/code&gt;. The
&lt;code&gt;getAuthor()&lt;/code&gt; method returns &lt;code&gt;Optional&amp;lt;Author&amp;gt;&lt;/code&gt; which is returned further by the &lt;code&gt;flatMap&lt;/code&gt; so we can
invoke &lt;code&gt;ifPresent()&lt;/code&gt; method to operate on &lt;code&gt;Author&lt;/code&gt; object - if it&amp;rsquo;s present.&lt;/p&gt;

&lt;p&gt;Please note how this notation hides all implementation details from us. We don&amp;rsquo;t really care if
something is &lt;code&gt;null&lt;/code&gt; or if something has gone wrong. We only care that if everything is fine we
just want to invoke some operation on the &lt;code&gt;Author&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;You may be saying now: &amp;ldquo;This is not more readable at all!&amp;rdquo;. You&amp;rsquo;re right but your statement is
false. What do I mean? Well &lt;code&gt;flatMap&lt;/code&gt; is something that one should get used to when playing with
functional programming because it&amp;rsquo;s one of the most used functions there. Lambdas, method
references, functional interfaces and better type inference (which still needs some love) introduced
in Java 8 is nothing more than inserting functional language properties into Java.&lt;/p&gt;

&lt;p&gt;I mean that when you get the hang of it, it&amp;rsquo;ll be more readable to you.&lt;/p&gt;

&lt;p&gt;In fact &lt;code&gt;flatMap&lt;/code&gt; is something that has it&amp;rsquo;s origins in category theory as the part of &lt;em&gt;monad&lt;/em&gt;
disguised under the name of &lt;code&gt;bind&lt;/code&gt; operation. The category theory isn&amp;rsquo;t required to use monads or
&lt;code&gt;flatMaps&lt;/code&gt;. You don&amp;rsquo;t really have to know how the engine works to drive a car, do you?&lt;/p&gt;

&lt;p&gt;What are monads? I believe that is something to cover in following posts. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I abandoned my old blog?</title>
      <link>http://blog.radoszewski.pl/post/previous-blog/</link>
      <pubDate>Thu, 09 Apr 2015 17:47:55 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/previous-blog/</guid>
      <description>

&lt;p&gt;This blog has very little content, but I&amp;rsquo;m not new to blogging at all.  In fact &lt;a href=&#34;https://moriturius.wordpress.com/&#34;&gt;I&amp;rsquo;ve been
publishing my thoughts and ideas online for a few years now&lt;/a&gt;. The only problem is that I&amp;rsquo;ve
got tired of it. I don&amp;rsquo;t mean blogging.  I mean &lt;em&gt;writing&lt;/em&gt; posts.&lt;/p&gt;

&lt;p&gt;I can hear you ask &amp;ldquo;What is the difference?&amp;rdquo;. Well&amp;hellip; I was using &lt;a href=&#34;http://wordpress.com&#34;&gt;Wordpress&lt;/a&gt;. This
software is great for blogging, but sometimes I wanted more. I wanted to insert my code into pages,
create custom themes and extensions etc.  Of course with tools like &lt;a href=&#34;http://heroku.org&#34;&gt;Heroku&lt;/a&gt; I could host my
own instance of Wordpress and create themes or extensions myself, but I don&amp;rsquo;t really like PHP and
Wordpress theming is not something I wanted to learn.&lt;/p&gt;

&lt;p&gt;Then there is also Vim. After I started using it I really didn&amp;rsquo;t want to edit text in the browser
ever again. Creating content with online editor wasn&amp;rsquo;t (and still isn&amp;rsquo;t) the best way to spend your
evenings - especially if you hit &lt;code&gt;Esc&lt;/code&gt; key all the time&amp;hellip;&lt;/p&gt;

&lt;p&gt;So I stopped blogging. I liked to share the ideas and get feedback from readers, but I needed some
motivation to get that going again - and Wordpress wasn&amp;rsquo;t helping with that ;)&lt;/p&gt;

&lt;h2 id=&#34;the-repair-program&#34;&gt;The repair program&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve started developing my own blog with Scala and &lt;a href=&#34;http://playframework.com/&#34;&gt;Play Framework&lt;/a&gt;. You can view
it&amp;rsquo;s &lt;a href=&#34;https://github.com/marad/blog&#34;&gt;source code on my GitHub&lt;/a&gt;. While doing that I&amp;rsquo;ve learned a lot of Scala. It was
great experience and I&amp;rsquo;m very happy that I did that! But when the page was up and running - I still
didn&amp;rsquo;t want to write posts because the editor was even worse! Posts had to be written in Markdown so
I could edit them locally (using Vim) and then copy the text to the page. I wasn&amp;rsquo;t happy with that
solution either.&lt;/p&gt;

&lt;h2 id=&#34;salvation&#34;&gt;Salvation&lt;/h2&gt;

&lt;p&gt;Lately I&amp;rsquo;ve decided to check out what are &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;. This was the best idea I&amp;rsquo;ve had
for a while :) Through that I discovered &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;. I wasn&amp;rsquo;t aware that there exists
  something like &lt;em&gt;static page generator&lt;/em&gt;. It turned out to be perfect solution for me!&lt;/p&gt;

&lt;p&gt;Now I can create my posts and pages using any editor I want and any markup language I like. Content
is versioned in git repository. Pages are hosted by GitHub and deployment is as easy as pushing
changes to remote branch. That&amp;rsquo;s just perfect :)&lt;/p&gt;

&lt;h2 id=&#34;the-language&#34;&gt;The language&lt;/h2&gt;

&lt;p&gt;If you checked out &lt;a href=&#34;https://moriturius.wordpress.com/&#34;&gt;my previous blog&lt;/a&gt; you may have noticed that I used my native language
there. I decided to change that because English has just bigger audience. Watching page statistics
I&amp;rsquo;ve discovered that some Google searches got foreign people to my page and the content could
probably help&amp;hellip; if they could read them :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don&#39;t Use Vim if you like your job!</title>
      <link>http://blog.radoszewski.pl/post/dont-use-vim/</link>
      <pubDate>Mon, 06 Apr 2015 09:59:31 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/dont-use-vim/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re like me you probably like to make your life easier wherever and whenever it is possible. I
also like to pick up the gauntlet and try something new and challenging. This is why I started to
use Vim.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a professional programmer. I&amp;rsquo;m paid to edit code. No wonder why I wanted my editing to be
quicker and easier.  I knew that Vim has it&amp;rsquo;s worshipers even though it&amp;rsquo;s &lt;em&gt;very&lt;/em&gt; old so I thought
there must be something great about it.  I&amp;rsquo;ve started to learn the Vim ways.&lt;/p&gt;

&lt;p&gt;Now - about a year later I can tell you &lt;strong&gt;don&amp;rsquo;t use Vim if you like your job!&lt;/strong&gt; Assuming, of course,
that your job has something to do with computers and editing text ;) You can ask me&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been using Vim for a year now I can edit text quickly and easily. I rarely have to reach out
with my hands even for the cursor keys - not to mention grabbing a mouse.&lt;/p&gt;

&lt;p&gt;What is wrong then? Well&amp;hellip; I can&amp;rsquo;t edit text or code with anything other than Vim now. Literally
&lt;strong&gt;every&lt;/strong&gt; other editor is just simple useless notepad to me! Thankfully vast majority of editors
support Vim-Mode editing. Honestly I was surprised with how many programs allow you to edit content
like Vim. The only problem is that Vim is huge.  It has hundreds of functions waiting for you to use
them. Vim-Mode in most programs allows you to do only basic things.&lt;/p&gt;

&lt;p&gt;For my job I use IntelliJ IDEA which (thanks to havens) have a plugin that enables Vim-like editing,
and it&amp;rsquo;s actually quite good. It&amp;rsquo;s a whole lot slower than real Vim but I believe it&amp;rsquo;s a fair trade
for features it provides.  Actually I use IntelliJ IDEA for only three reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;auto completion,&lt;/li&gt;
&lt;li&gt;organizing imports,&lt;/li&gt;
&lt;li&gt;refactoring variable/method/class names.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact I could live without the refactoring, but it&amp;rsquo;s hard to give up auto completion&amp;hellip; Trust me,
I&amp;rsquo;ve tried&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;To sum up. I&amp;rsquo;d recommend using Vim to everyone if only all editors had great support for it. Only
problem is that if you get used to editing text the Vim-way you&amp;rsquo;ll never look at any other editor
ever again. To be honest Vim was one of the reasons I&amp;rsquo;ve stopped writing on my previous blog. I just
didn&amp;rsquo;t want to use this Wordpress&amp;rsquo;s online editor.  I could never make the post look like I desired
and it was just plain simple notepad. Believe me that I had to remove a lot of things like &lt;code&gt;jjcip&lt;/code&gt;
from the text&amp;hellip;&lt;/p&gt;

&lt;p&gt;TL;DR: If you are working with text - try Vim on your own responsibility. Vim will spoil you and you
will never want to use any other editor!&lt;/p&gt;

&lt;p&gt;See you! (and yes - I wrote this in Vim)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pattern Matching in Scala</title>
      <link>http://blog.radoszewski.pl/post/scala-pattern-matching/</link>
      <pubDate>Sun, 05 Apr 2015 21:54:00 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/scala-pattern-matching/</guid>
      <description>

&lt;p&gt;Not so long ago I gave a presentation about Scala and ScalaTest to my co-workers. This was just
basics as I wanted to give them a good and solid base for future researching this language. As it
turned out - I probably learned a lot more than they did from this :)&lt;/p&gt;

&lt;p&gt;Whenever there is &lt;em&gt;Scala&lt;/em&gt; mentioned there also is the phrase &lt;em&gt;pattern matching&lt;/em&gt;. Of course Scala
does support pattern matching but I didn&amp;rsquo;t know how much fun one can have with this. In this post
I&amp;rsquo;d like to show a few fun things we can do with this.&lt;/p&gt;

&lt;h2 id=&#34;simple-matching&#34;&gt;Simple matching&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s start with something simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showcase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Other!&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the simplest case - we have value of some concrete type and we want to execute some code
depending on that value. This can be easily replaced with Java&amp;rsquo;s &lt;code&gt;switch&lt;/code&gt; instruction or bunch of
&lt;code&gt;if-else&lt;/code&gt; instructions.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re new to Scala then you can be wondering what means the &lt;code&gt;case _&lt;/code&gt; - this will match any other
value than listed above it. In fact it is important that this is at the very bottom &lt;code&gt;case&lt;/code&gt; because
values are matched from top. If the value didn&amp;rsquo;t match the first &lt;code&gt;case&lt;/code&gt; then next is checked. If the
value doesn&amp;rsquo;t match any case then exception is thrown. Also - function that is not covering all
possible inputs is called &lt;em&gt;partial function&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;OK, basic things are simple, but it&amp;rsquo;s not that we couldn&amp;rsquo;t write something like this easily in Java.
Let us try something a bit different:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sealed&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Second&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showcase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;First&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;First&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Second&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all - we declare the &lt;em&gt;Base&lt;/em&gt; class. &lt;code&gt;sealed&lt;/code&gt; keyword means that all direct subclasses of
this class are contained in the same file. Then we declare subclasses &lt;code&gt;First&lt;/code&gt; and &lt;code&gt;Second&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having such class structure we can match the class of given &lt;code&gt;input&lt;/code&gt;. This is of course something we
&lt;em&gt;CAN&lt;/em&gt; do in Java but it&amp;rsquo;s not that elegant. We would have to write bunch of &lt;code&gt;isInstanceOf&lt;/code&gt; and then
cast our input to target class. Casting means that we can mix something up and generate some casting
exceptions. Here - everything is taken care of and is type safe.&lt;/p&gt;

&lt;p&gt;You may have noticed that I&amp;rsquo;ve not specified the &lt;code&gt;case _&lt;/code&gt;. You might think that this means that the
&lt;code&gt;showcase&lt;/code&gt; function is &lt;em&gt;partial function&lt;/em&gt; but it is not. In fact by using keyword &lt;code&gt;sealed&lt;/code&gt; I made
sure that I know &lt;em&gt;EVERY&lt;/em&gt; direct implementation of &lt;code&gt;Base&lt;/code&gt; class. So I know that input can only be
either of type &lt;code&gt;First&lt;/code&gt; or &lt;code&gt;Second&lt;/code&gt;. There is just no other option!&lt;/p&gt;

&lt;p&gt;Speaking of options - exactly this trick is used with &lt;code&gt;Option[T]&lt;/code&gt; type. It has two implementations -
&lt;code&gt;Some()&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;. There is no third option.&lt;/p&gt;

&lt;h2 id=&#34;matching-case-classes&#34;&gt;Matching case classes&lt;/h2&gt;

&lt;p&gt;Assume that we have declared following class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Defining class as &lt;code&gt;case class&lt;/code&gt; gives us some benefits for pattern matching:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showcase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;post with id = 1&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see it&amp;rsquo;s quite different than matching the type. We get some &lt;code&gt;Post&lt;/code&gt; as the input and then
test it with our matches.&lt;/p&gt;

&lt;p&gt;On the second line we check if given post has &lt;code&gt;id == 1&lt;/code&gt; and if it does then returns some descriptive
text. Note that we can tell the compiler that we don&amp;rsquo;t really care for other parameters with &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the post&amp;rsquo;s &lt;code&gt;id&lt;/code&gt; is not 1 then match it&amp;rsquo;s title to variable named &lt;code&gt;title&lt;/code&gt; and return that
variable. Once again - we ignore inputs that we are not interested in.&lt;/p&gt;

&lt;p&gt;But what if we want to check only certain parameter values and then have the whole object to play
with? Don&amp;rsquo;t worry - Scala got you covered!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showcase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Above example shows that we can match the value of &lt;code&gt;id&lt;/code&gt; and if the value matches 1 we want the whole
object to be assigned to variable &lt;code&gt;post&lt;/code&gt;. We can later use this variable as a reference to our
matching object. In this case we just return this post&amp;rsquo;s content.&lt;/p&gt;

&lt;h2 id=&#34;matching-regular-expressions&#34;&gt;Matching regular expressions&lt;/h2&gt;

&lt;p&gt;You can&amp;rsquo;t say &lt;em&gt;matching&lt;/em&gt; without saying &lt;em&gt;regular expressions&lt;/em&gt;, can you? Let&amp;rsquo;s consider this simple
expression for matching dates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;(\d\d\d\d)-(\d\d)-(\d\d)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Having that you can already match any string you want with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;2015-04-05&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;s&amp;quot;It&amp;#39;s year &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$year&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see we use the variable name followed parentheses with all the matched groups from
regular expressions. Then we can use this groups as normal variables. In this case we just want to
match a year so maybe &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;day&lt;/code&gt; could be replaced with &lt;code&gt;_&lt;/code&gt;? Sure!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;2015-04-05&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;s&amp;quot;It&amp;#39;s year &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$year&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whoah! What happend here? Well&amp;hellip; as we are not interested in all remaining groups we can ignore
them all with this simple notation &lt;code&gt;_*&lt;/code&gt;. In this case it&amp;rsquo;s not that different but if you had ten
matching groups you&amp;rsquo;d have to ignore them all explicitly. This way you can ignore them all together!&lt;/p&gt;

&lt;h2 id=&#34;matching-in-for-loops&#34;&gt;Matching in &lt;code&gt;for&lt;/code&gt; loops&lt;/h2&gt;

&lt;p&gt;Last thing I&amp;rsquo;d like to show you is that you can easily loop through lists of things that matches
your criteria:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posts&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Title 1&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Content 1&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Title 2&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Content 2&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Other Title&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Content 3&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;for&lt;/code&gt; loop will only execute it&amp;rsquo;s body for the first post from the list. In this case we can
match only one value because the 1 is passed statically. What if we could combine different matching
styles to tell the compiler what we desire? Totally doable!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;^Title.*&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posts&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do we have here? We added simple regex pattern to match only titles that start with &amp;ldquo;Title&amp;rdquo;.
Please note the parentheses after regex variable name. We haven&amp;rsquo;t specified any names for matched
groups because our regular expression doesn&amp;rsquo;t capture any groups. Empty parentheses are still
required. Otherwise scala would think that we want to catch the title and create varaible called
&lt;code&gt;pattern&lt;/code&gt; with value of the whole title. Adding parentheses tell the compiler that this is regular
expression and that it should be used for matching.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Pattern matching in Scala is a powerful tool. I&amp;rsquo;m certain that what is describe here is just the tip
of an iceberg, but I hope it gives you some useful tips for working with &lt;code&gt;match&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scalartemis</title>
      <link>http://blog.radoszewski.pl/post/scalartemis/</link>
      <pubDate>Sat, 04 Apr 2015 22:06:00 +0200</pubDate>
      
      <guid>http://blog.radoszewski.pl/post/scalartemis/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been creating entity component framework which I named &lt;em&gt;Scalartemis&lt;/em&gt;. Name is direct descendant of two words. First (surprisingly) is &lt;em&gt;Scala&lt;/em&gt; - the language it&amp;rsquo;s written in. Second is &lt;em&gt;Artemis&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gamadu.com/artemis/&#34;&gt;Artemis&lt;/a&gt; is entity component framework that I wanted to port to Scala. During the process of porting I started to change things a bit to achieve better performance/api/usability. At some point I decided that this is pointless and I should start from scratch using the knowledge I&amp;rsquo;ve gained. This is exactly what I&amp;rsquo;ve done.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found &lt;a href=&#34;http://entity-systems.wikidot.com/fast-entity-component-system&#34;&gt;document&lt;/a&gt; which was the base for Artemis. Unfortunately its creators had not followed it closely. I think that there is room for improvements so I decided to give it a shot.&lt;/p&gt;

&lt;h3 id=&#34;what-it-is-all-about&#34;&gt;What it is all about?&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;ve ever tried to make a game you must have noticed that you should manage your game objects. You should be able to draw the elements that can be drawn but there could be also entities without graphic representation like some special areas. The entities differ from one another. Hero, bullet, and a gun are all entities but are entirely different. Hero does have stats like &lt;em&gt;health&lt;/em&gt; or &lt;em&gt;stamina&lt;/em&gt; but this is totally not applicable to his gun.&lt;/p&gt;

&lt;p&gt;Component Entity Frameworks are one way of dealing with this problem. They try to make entity as abstract as it can be and then add multiple components describing its properties. I&amp;rsquo;ve seen many implementations which tried to represent the &lt;em&gt;entity&lt;/em&gt; as a class which had list of components. One of the problems with this approach is performance. Implementing this you would probably say &lt;em&gt;&amp;lsquo;RenderComponent is so common that I should make it special and available from the entity class without searching in the component list.&amp;rsquo;&lt;/em&gt;. At least this is what I ended up with every time I tried to approach component entity systems.&lt;/p&gt;

&lt;h3 id=&#34;what-is-different-from-artemis&#34;&gt;What is different from Artemis?&lt;/h3&gt;

&lt;p&gt;While I liked the overall concept I didn&amp;rsquo;t like the code that was written to satisfy it. The more I read the Artemis code base the more I wanted to rewrite it from scratch. Starting from the beginning I&amp;rsquo;ve reimplemented almost completely (no entity tagging yet) Artemis and I believe I&amp;rsquo;ve cut number of classes in a half. We all know that the less code we have the less code can break ;)&lt;/p&gt;

&lt;p&gt;Also I&amp;rsquo;ve implemented everything using TDD so every functionality has it&amp;rsquo;s unit test. This of course gives me very good indication whether my changes break something somewhere or not :)&lt;/p&gt;

&lt;h3 id=&#34;enough-talking-show-me-the-code&#34;&gt;Enough talking, show me the code!&lt;/h3&gt;

&lt;p&gt;Sure, sure. I wanted to keep the API very similar to Artemis&amp;rsquo;s:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Component&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PositionUpdateSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SequentialProcessingSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Aspect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forAll&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ComponentMapping&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entity&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Entity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Unit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Some&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;14 &lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;15 &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;16 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;17 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;World&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;18 &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;registerSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;PositionUpdateSystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;19 &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createEntity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;20 &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the first line we declare new component class &lt;code&gt;Position&lt;/code&gt;. Next up is declaration of entity processing system. In this case we extend &lt;code&gt;SequentialProcessingSystem&lt;/code&gt; which just give us all entities one by one. The interesting thing here is that every entity system has to has an &lt;code&gt;Aspect&lt;/code&gt;. Aspects define which entities can be processed by the system. Here we want all entities with &lt;code&gt;Position&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;process&lt;/code&gt; method of entity system is the one that does the job. In this case we just get the component of type &lt;code&gt;Position&lt;/code&gt; for processed entity and increase its &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values by 1.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;component[T](entity: Entity)&lt;/code&gt; method is provided by &lt;code&gt;ComponentMapping&lt;/code&gt; trait. This trait requires that the class has the &lt;code&gt;world: World&lt;/code&gt; field so it can fetch the entity components.&lt;/p&gt;

&lt;p&gt;Starting from line 17 we create new World, register our entity processing system and create single entity with component &lt;code&gt;Position(1, 2)&lt;/code&gt;. This four lines causes a lot of events under the hood. First of all when the system is registered &lt;em&gt;world&lt;/em&gt; creates a set of entities with matching aspect required by the system. If set for such aspect already exists it&amp;rsquo;s only passed to the system. Of course in this case we don&amp;rsquo;t have any entities yet, but empty set is created and is updated when entity with required aspect is created.&lt;/p&gt;

&lt;p&gt;Then when the entity is created it&amp;rsquo;s automatically added to the right entity sets and is instantly available to all the system that are interested in it (based on component set).&lt;/p&gt;

&lt;p&gt;Last line - 20 - is where everything comes to life. We perform one update of all systems. Here we have only one system with one entity and the logic is not very spectacular but hey, it&amp;rsquo;s something! After this call to &lt;code&gt;update&lt;/code&gt; method the entity position is going to be &lt;code&gt;Position(2, 3)&lt;/code&gt; of course .&lt;/p&gt;

&lt;h3 id=&#34;that-s-all&#34;&gt;That&amp;rsquo;s all!&lt;/h3&gt;

&lt;p&gt;OK, I think this post is already too long. I just wanted to present the implementation of component entity framework I&amp;rsquo;m working on. If you&amp;rsquo;d like to dive into the code you could view it on &lt;a href=&#34;https://github.com/marad/scalartemis&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://blog.radoszewski.pl/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/page/about/</guid>
      <description>

&lt;h2 id=&#34;professional-experience&#34;&gt;Professional Experience&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m working professionally as Java developer since 2011. Currently I work for &lt;a href=&#34;http://en.wikipedia.org/wiki/Allegro_(auction_website)&#34;&gt;Allegro
Group&lt;/a&gt;. It&amp;rsquo;s the biggest online auctioning website in Poland. Previously I worked for
smaller company named &lt;a href=&#34;http://www.ais.pl&#34;&gt;AIS.PL&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;interests&#34;&gt;Interests&lt;/h2&gt;

&lt;p&gt;I like to do a lot of things, but the most fun for me are two below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;programming&lt;/em&gt; - I&amp;rsquo;ve started programming with C++ in 2002. Back then I was super excited about making games. Now, few years later - I&amp;rsquo;m still super excited about making games! Now I&amp;rsquo;m a Java developer. I do mostly webapp backends. For my personal projects I&amp;rsquo;ve tried a lot of programming languages. The one that keeps coming back is Scala. I&amp;rsquo;m using it for most of my non-work programming.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;playing the guitar&lt;/em&gt; - since I was a kid I wanted to play the guitar so my parents got me one. I&amp;rsquo;ve played in a few bands but playing concerts is not my best way of spending time. I&amp;rsquo;d rather play just with my friends in the garage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;programming-languages-and-technologies&#34;&gt;Programming languages and technologies&lt;/h2&gt;

&lt;p&gt;As mentioned above I like learning various programming languages. I&amp;rsquo;ve tried very hard to like the dynamically typed languages like Python and Java Script. They are fun to play with because it&amp;rsquo;s very easy to quickly make simple tools. Unfortunately this does not work very well when creating something bigger then BMI calculator&amp;hellip; On the other hand static typing seemed too verbose. This was before I discovered Scala :)&lt;/p&gt;

&lt;p&gt;Below I listed my favorite languages/technologies/whatever:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;LISP&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Java - I&amp;rsquo;m working with it professionally since 2012&lt;/li&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java Script&lt;/li&gt;
&lt;li&gt;Assembler - mostly basics&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Games</title>
      <link>http://blog.radoszewski.pl/page/games/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/page/games/</guid>
      <description>

&lt;style&gt;
  img.small {
    max-width: 200px;
    max-height: 100px;
    float: left;
    margin: 5px;
  }
&lt;/style&gt;

&lt;p&gt;I&amp;rsquo;ve started creating a lot of games in my life. Few of them were playable. There wasn&amp;rsquo;t to many games I actually finished. It is the path that was important - not the destination :)&lt;/p&gt;

&lt;h2 id=&#34;money-soccer&#34;&gt;Money Soccer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/money.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Money Soccer&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/money.png&#34; class=&#34;small&#34; alt=&#34;Money Soccer Screenshot&#34;&gt;
&lt;/a&gt;
Inspired with a game that we were playing at school desks I&amp;rsquo;ve created something like that in the virtual world. Rules are very simple. Each turn a player can use just one of the coins. He has to hit the coin so that it passes the line between the remaining two coins. If it does the player can do another move, but cannot use the same coin again. If the coin fails to pass the line between the remaining two - second player gets his move. Of course the goal is to score a goal :)&lt;/p&gt;

&lt;h2 id=&#34;pong&#34;&gt;Pong&lt;/h2&gt;

&lt;p&gt;This is a classic Pong clone. It&amp;rsquo;s the first game that was finished enough so I can show it to the world:)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve published the game at &lt;a href=&#34;http://forum.gamedev.pl/index.php/topic,161.0.html&#34;&gt;Polish gamedev forum&lt;/a&gt;. Unfortunately I don&amp;rsquo;t have any working copy of the game or it&amp;rsquo;s code. Not even a screen shot&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Music</title>
      <link>http://blog.radoszewski.pl/page/music/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/page/music/</guid>
      <description>

&lt;p&gt;This is the place for all the music I&amp;rsquo;ve decided to share with the world. Please don&amp;rsquo;t expect it to be very large collection. I don&amp;rsquo;t usually record my guitar sessions but when I do I think that they&amp;rsquo;re mostly not good enough for the world.&lt;/p&gt;

&lt;h2 id=&#34;zegarmistrz-Å›wiatÅ‚a&#34;&gt;Zegarmistrz ÅšwiatÅ‚a&lt;/h2&gt;

&lt;p&gt;This one I&amp;rsquo;ve recorded years ago. It&amp;rsquo;s rather 5-minute solo with MIDI backing track but I think it&amp;rsquo;s pretty nice :) (except the MIDI part)&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&#34;http://www.mediafire.com/?aynd0yzteun&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.mediafire.com/?aynd0yzteun&#34;&gt;http://www.mediafire.com/?aynd0yzteun&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programs</title>
      <link>http://blog.radoszewski.pl/page/programs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.radoszewski.pl/page/programs/</guid>
      <description>

&lt;style&gt;
  img.small {
    max-width: 200px;
    max-height: 100px;
    float: left;
    margin: 5px;
  }
&lt;/style&gt;

&lt;h3 id=&#34;all-this-programs-are-very-old-for-my-current-creations-please-visit-my-github-github-page&#34;&gt;All this programs are very old! For my current creations please visit my &lt;a href=&#34;http://www.github.com/marad&#34;&gt;GitHub&lt;/a&gt; page!&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve created tons of programs during my coding adventures. Unfortunately most of them wasn&amp;rsquo;t
finished or wasn&amp;rsquo;t good enough to show it. In this section I&amp;rsquo;d like to present only a few of my
programs.&lt;/p&gt;

&lt;h2 id=&#34;windows-manifest-utility&#34;&gt;Windows Manifest Utility&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/wmu.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Windows Manifest Utility&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/wmu.png&#34; class=&#34;small&#34; alt=&#34;Windows Manifest Utility screen shot&#34;&gt;
&lt;/a&gt;
Little program that I made to create Windows manifest files and embedding them in the executable files. I used it only to make my C++ Builder programs look less like Windows 98 in Windows XP and newer.&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;sprite-editor&#34;&gt;Sprite Editor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/spriteeditor.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Sprite Editor&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/spriteeditor.png&#34; class=&#34;small&#34; alt=&#34;Sprite Editor screnn shot&#34;&gt;
&lt;/a&gt;
Simple graphics editor to create small 2D game sprites. It was designed so it handles multiple layers, transparency and real big zoom in. It&amp;rsquo;s basically a little more advanced Paint :)&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;uo-macro&#34;&gt;UO Macro&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/uomacro.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;UO Macro&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/uomacro.png&#34; class=&#34;small&#34; alt=&#34;UO Macro screen shot&#34;&gt;
&lt;/a&gt;
I&amp;rsquo;m lazy. Even with games! I&amp;rsquo;ve created this tool to aid my playing the Ultima Online game. With this tool you can write a little scripts to make the repeating tasks bearable. It simply sends keystrokes and mouse clicks to the UO game window. I&amp;rsquo;ve added variables and delay support and that was all I needed at that time.&lt;/p&gt;

&lt;p&gt;At that time there already was &lt;a href=&#34;http://www.easyuo.com/&#34;&gt;EasyUO&lt;/a&gt;. Unfortunately it didn&amp;rsquo;t work with the old game client that was required on the server I was playing.&lt;/p&gt;

&lt;p&gt;The scripting language wasn&amp;rsquo;t very elastic. It was somewhat reminiscent to Assembler and PHP combined :)&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;planner-8lo&#34;&gt;Planner 8LO&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/planer.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Planner 8LO&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/planer.png&#34; class=&#34;small&#34; alt=&#34;Planner 8LO screen shot&#34;&gt;
&lt;/a&gt;
Download: &lt;a href=&#34;http://www.mediafire.com/?5p1au4k9jmr&#34;&gt;Planner 8LO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was in High School. The time table was available online. Before leaving to school I normally opened a browser and navigate to the page with the time table to check the books I had to take with me. I figured that a very simple program to load time table for my class at startup would be very nice (browsers start soo loong). In just a few lines of code I was able to make my life better :)&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;ogame-transporter&#34;&gt;Ogame Transporter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/ogtransport.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;OGame Transporter&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/ogtransport.png&#34; class=&#34;small&#34; alt=&#34;OGame Transporter screen shot&#34;&gt;
&lt;/a&gt;
Download: &lt;a href=&#34;http://www.mediafire.com/?9ojow1yma3f&#34;&gt;OGame Transporter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In high school I&amp;rsquo;ve played OGame with my friends. Some tasks and calculations were repeatable. This tool was to help me quickly compute the amount of transporters to use when I wanted to transport the resources to another planet to build or research something there.&lt;/p&gt;

&lt;p&gt;It only worked with Polish OGame and now it doesn&amp;rsquo;t work at all because of the GUI changes.&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;dir-lister&#34;&gt;Dir Lister&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/dirlister.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Dir Lister&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/dirlister.png&#34; class=&#34;small&#34; alt=&#34;Dir Lister screen shot&#34;&gt;
&lt;/a&gt;
Creates a list of files and directories in given directory. You can also filter the file extensions you want to have on the list. I guess I needed something like that at some point in my life :)&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;coff2omf&#34;&gt;Coff2Omf&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/coff2omf.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Coff2Omf&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/coff2omf.png&#34; class=&#34;small&#34; alt=&#34;Coff2Omf screen shot&#34;&gt;
&lt;/a&gt;
This program was created as a GUI to Borland&amp;rsquo;s coff2omf tool. It converted the library files from Microsoft&amp;rsquo;s COFF format to Borland&amp;rsquo;s OMF format.&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;numerology&#34;&gt;Numerology&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/numerologia.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Numerologia&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/numerologia.png&#34; class=&#34;small&#34; alt=&#34;Numerologia screen shot&#34;&gt;
&lt;/a&gt;
Download: &lt;a href=&#34;http://www.mediafire.com/?81jglsbxs2t&#34;&gt;Numerology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My sister asked me to write the program to compute a simple algorithm from her numerology book. As it turned out - it was much more rewriting text from the book than actual coding.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s Polish only!&lt;/p&gt;

&lt;div style=&#34;clear:both&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;color-palette&#34;&gt;Color Palette&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://i11.photobucket.com/albums/a192/doszes/colorpalette.png&#34; data-lightbox=&#34;image-2&#34; data-title=&#34;Color Palette&#34;&gt;
  &lt;img src=&#34;http://i11.photobucket.com/albums/a192/doszes/colorpalette.png&#34; class=&#34;small&#34; alt=&#34;Color Palette screen shot&#34;&gt;
&lt;/a&gt;
Download: &lt;a href=&#34;http://www.mediafire.com/?7gzmmfjz8sg&#34;&gt;Color Palette&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This program&amp;rsquo;s only purpose is to hold informations about colors. It might be useful to create customized color palette to use across your system. I personally used it with my Sprite Editor which is listed above.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>